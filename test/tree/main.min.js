/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* global Angel  */
	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Calcu = __webpack_require__(1);

	var _Calcu2 = _interopRequireDefault(_Calcu);

	var _Canvas = __webpack_require__(2);

	var _Canvas2 = _interopRequireDefault(_Canvas);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Tree = function () {
	    function Tree(data, container) {
	        var _this = this;

	        _classCallCheck(this, Tree);

	        this.data = data;
	        this.canvasInfo = _Canvas2.default.init(container, {
	            repaint: function repaint(centerX, centerY) {
	                // 画布拖动引发重绘
	                _this.canvasInfo.centerX = centerX;
	                _this.canvasInfo.centerY = centerY;
	                _this.draw();
	            }
	        });
	        this.draw();
	    }

	    _createClass(Tree, [{
	        key: 'draw',
	        value: function draw() {
	            var _this2 = this;

	            var angel = this.canvasInfo.angel,
	                cx = this.canvasInfo.centerX,
	                cy = this.canvasInfo.centerY,
	                r = 6,
	                // 半径
	            wd = 100,
	                // 横向间距
	            hd = 20,
	                // 纵向间距
	            data = _Calcu2.default.layout(this.data);
	            var iterateNode = function iterateNode(node, parentNode) {
	                var circle = new Angel.Circle({
	                    zlevel: 2,
	                    style: {
	                        x: node.x + cx,
	                        y: node.y + cy,
	                        r: r,
	                        brushType: 'fill',
	                        lineWidth: 1
	                    },
	                    data: node
	                });
	                angel.addShape(circle);
	                if (parentNode) {
	                    var line = new Angel.Line({
	                        zlevel: 1,
	                        style: {
	                            brushType: 'stroke',
	                            lineWidth: 1,
	                            path: [{
	                                x: node.x + cx,
	                                y: node.y + cy
	                            }, {
	                                x: parentNode.x + cx,
	                                y: parentNode.y + cy
	                            }]
	                        }
	                    });
	                    angel.addShape(line);
	                }
	                circle.on('click', function () {
	                    if (node.childrend) {
	                        delete node.children;
	                        _this2.draw();
	                        return;
	                    }
	                    node.children = [];
	                    var n = Math.ceil(Math.random() * 2 + 1);
	                    for (var i = 0; i < n; i++) {
	                        node.children.push({
	                            name: 'a'
	                        });
	                    }
	                    _this2.draw();
	                });
	                if (node.children) {
	                    for (var i = 0; i < node.children.length; i++) {
	                        iterateNode(node.children[i], node);
	                    }
	                }
	            };

	            angel.clear();
	            iterateNode(data);
	            angel.render();
	        }
	    }]);

	    return Tree;
	}();

	new Tree({
	    name: 'a',
	    children: [{ name: 'b' }, { name: 'c' }, { name: 'd',
	        children: [{ name: 'd1' }, { name: 'd2' }]
	    }]
	}, document.getElementById("Main"));

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global Angel  */

	var Calcu = function () {
	    function Calcu() {
	        _classCallCheck(this, Calcu);
	    }

	    _createClass(Calcu, [{
	        key: "layout",
	        value: function layout(data) {
	            var r = 6,
	                // 半径
	            wd = 100,
	                // 横向间距
	            hd = 20,
	                // 纵向间距
	            leafNodes = [],
	                // 储存叶子节点
	            d = Object.assign({ x: 0, y: 0 }, data);

	            var iterateNode = function iterateNode(node, parentNode, level) {
	                level = level || 0;
	                node.level = level || 0;
	                if (node.children) {
	                    level++;
	                    for (var i = 0; i < node.children.length; i++) {
	                        iterateNode(node.children[i], node, level);
	                    }
	                } else {
	                    // 叶子节点
	                    leafNodes.push(node);
	                }
	                if (parentNode) {
	                    node._parentNode = parentNode;
	                }
	            };
	            iterateNode(d);

	            var iterateFromBottom = function iterateFromBottom(nodes) {
	                for (var i = 0; i < nodes.length; i++) {
	                    nodes[i].y = (i - (nodes.length - 1) / 2) * hd;
	                    nodes[i].x = nodes[i].level * wd;

	                    var parentNode = nodes[i]._parentNode;
	                    if (parentNode) {
	                        parentNode._childLayerNum = parentNode._childLayerNum ? parentNode._childLayerNum + 1 : 1;
	                        while (parentNode._childLayerNum === parentNode.children.length) {
	                            parentNode.y = (parentNode.children[0].y + parentNode.children[parentNode.children.length - 1].y) / 2;
	                            parentNode.x = parentNode.level * wd;

	                            parentNode = parentNode._parentNode;
	                            if (!parentNode) {
	                                break;
	                            } else {
	                                parentNode._childLayerNum = parentNode._childLayerNum ? parentNode._childLayerNum + 1 : 1;
	                            }
	                        }
	                    }
	                }
	            };
	            iterateFromBottom(leafNodes);
	            console.info(d);

	            return d;
	        }
	    }]);

	    return Calcu;
	}();

	exports.default = new Calcu();

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global Angel  */

	var Canvas = function () {
	    function Canvas() {
	        _classCallCheck(this, Canvas);
	    }

	    _createClass(Canvas, [{
	        key: 'init',
	        value: function init(container) {
	            var opt = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            var canvas = this.createCanvas(container);
	            this.angel = Angel.init(canvas);
	            this.repaint = opt.repaint;

	            this.bindEvent(canvas);
	            return {
	                angel: this.angel,
	                centerX: this.centerX,
	                centerY: this.centerY
	            };
	        }
	    }, {
	        key: 'getTranslateX',
	        value: function getTranslateX(dom) {
	            return this.getTranslate(dom, 0);
	        }
	    }, {
	        key: 'getTranslateY',
	        value: function getTranslateY(dom) {
	            return this.getTranslate(dom, 1);
	        }
	    }, {
	        key: 'getTranslate',
	        value: function getTranslate(dom, i) {
	            var str = dom.style.transform;
	            return parseInt(str.match(/(\-)?[\.\d]+/g)[i]);
	        }
	    }, {
	        key: 'setTranslate',
	        value: function setTranslate(dom, x, y) {
	            dom.style.transform = 'translate(' + x + 'px, ' + y + 'px)';
	        }
	    }, {
	        key: 'createCanvas',
	        value: function createCanvas(container) {
	            var canvas = this.canvas = document.createElement('div');
	            container.appendChild(canvas);
	            canvas.style.position = "relative";
	            canvas.style.width = 5 * container.offsetWidth + 'px';
	            canvas.style.height = 5 * container.offsetHeight + 'px';
	            this.setTranslate(canvas, -0.4 * canvas.offsetWidth, -0.4 * canvas.offsetHeight);
	            this.width = 5 * container.offsetWidth;
	            this.height = 5 * container.offsetHeight;
	            this.centerX = 2.5 * container.offsetWidth;
	            this.centerY = 2.5 * container.offsetHeight;
	            return canvas;
	        }
	    }, {
	        key: 'initCanvasPosition',
	        value: function initCanvasPosition() {
	            var canvas = this.canvas;
	            this.setTranslate(canvas, -0.4 * canvas.offsetWidth, -0.4 * canvas.offsetHeight);
	        }
	    }, {
	        key: 'bindEvent',
	        value: function bindEvent(canvasDom) {
	            var _this = this;

	            // 绑定画布拖动状态
	            var dom = canvasDom,
	                isDown = false,
	                startX = void 0,
	                startY = void 0,
	                domX = void 0,
	                domY = void 0;
	            dom.addEventListener('mousedown', function (e) {
	                isDown = true;
	                startX = e.pageX;
	                startY = e.pageY;
	                domX = _this.getTranslateX(dom);
	                domY = _this.getTranslateY(dom);
	            });
	            dom.addEventListener('mousemove', function (e) {
	                if (isDown) {
	                    // 画布拖动
	                    _this.setTranslate(dom, domX + e.pageX - startX, domY + e.pageY - startY);
	                }
	            });

	            var dragComplete = function dragComplete() {
	                isDown = false;
	                var w = _this.width,
	                    h = _this.height,
	                    x = _this.getTranslateX(dom),
	                    y = _this.getTranslateY(dom);
	                if (x < -0.6 * w || x > -0.2 * w || y < -0.6 * h || y > -0.2 * y) {
	                    if (_this.repaint) {
	                        _this.centerX += x + _this.width * 0.4;
	                        _this.centerY += y + _this.height * 0.4;
	                        _this.initCanvasPosition();
	                        _this.repaint(_this.centerX, _this.centerY);
	                    }
	                }
	            };
	            dom.addEventListener('mouseup', dragComplete);
	            dom.addEventListener('mouseout', dragComplete);
	        }
	    }]);

	    return Canvas;
	}();

	exports.default = new Canvas();

/***/ }
/******/ ]);