/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* global Angel  */
	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Calcu = __webpack_require__(1);

	var _Calcu2 = _interopRequireDefault(_Calcu);

	var _Canvas = __webpack_require__(2);

	var _Canvas2 = _interopRequireDefault(_Canvas);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Tree = function () {
	    function Tree(data, container) {
	        var _this = this;

	        _classCallCheck(this, Tree);

	        this.canvasInfo = _Canvas2.default.init(container, {
	            repaint: function repaint(centerX, centerY) {
	                // 画布拖动引发重绘
	                _this.canvasInfo.centerX = centerX;
	                _this.canvasInfo.centerY = centerY;
	                _this.draw();
	            }
	        });
	        if (data) {
	            this.setData(data.nodes, data.links);
	        }
	    }

	    _createClass(Tree, [{
	        key: 'setData',
	        value: function setData(nodes, links) {
	            this.data = Object.assign({}, this.data) || {};
	            this.data.nodes = nodes || [];
	            this.data.links = links || [];
	            this.draw();
	        }
	    }, {
	        key: 'draw',
	        value: function draw() {
	            var _this2 = this;

	            var angel = this.canvasInfo.angel,
	                cx = this.canvasInfo.centerX,
	                cy = this.canvasInfo.centerY,
	                data = _Calcu2.default.layoutNodeByDagre(this.data),
	                nodes = data.nodes,
	                links = data.links;

	            // 清空
	            angel.clear();

	            // 绘制点
	            nodes.forEach(function (node) {
	                var circle = new Angel.Circle({
	                    zlevel: 2,
	                    style: {
	                        x: node.x + cx,
	                        y: node.y + cy,
	                        r: node.width / 2,
	                        brushType: 'both',
	                        fillStyle: node.data.color,
	                        strokeStyle: node.data.borderColor,
	                        lineWidth: 1
	                    },
	                    data: node.data
	                });
	                angel.addShape(circle);
	                // 绑定点击事件
	                _this2.bindClickEvent(circle);
	            });
	            // 绘制线
	            links.forEach(function (link) {
	                var p = link.points;
	                var line = new Angel.BezierCurve({
	                    zlevel: 2,
	                    style: {
	                        brushType: 'stroke',
	                        lineWidth: link.data.size,
	                        strokeStyle: link.data.color,
	                        points: _Calcu2.default.layoutLine(p[0], p[p.length - 1], {
	                            x: cx,
	                            y: cy
	                        })
	                    }
	                });
	                angel.addShape(line);
	            });
	            angel.render();
	        }
	    }, {
	        key: 'bindClickEvent',
	        value: function bindClickEvent(nodeShape) {
	            var nodeData = nodeShape.data;
	            nodeShape.on('click', function () {
	                console.info(nodeData);
	                //this.draw();
	            });
	        }
	    }]);

	    return Tree;
	}();

	// test


	var treeDiagram = new Tree({
	    onExpand: function onExpand(nodeData) {},
	    onNodeMouseEnter: function onNodeMouseEnter(nodeData, position) {},
	    onNodeMouseLeave: function onNodeMouseLeave(nodeData, position) {}
	}, document.getElementById("Main"));

	// mock data
	var nodesMap = {},
	    nodes = [{
	    id: 1,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 10
	}, {
	    id: 2,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 10,
	    type: 'root'
	}, {
	    id: 3,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 20
	}, {
	    id: 4,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 10
	}, {
	    id: 5,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 20
	}],
	    links = [{
	    from: 1,
	    to: 2,
	    size: 1,
	    color: 'rgba(200, 0, 0, 1)'
	}, {
	    from: 3,
	    to: 2,
	    size: 1,
	    color: 'rgba(0, 0, 0, 1)'
	}, {
	    from: 2,
	    to: 4,
	    size: 2,
	    color: 'rgba(0, 0, 0, 1)'
	}, {
	    from: 2,
	    to: 5,
	    size: 3,
	    color: 'rgba(0, 0, 0, 1)'
	}];

	treeDiagram.setData(nodes, links);

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global dagre  */

	var Calcu = function () {
	    function Calcu() {
	        _classCallCheck(this, Calcu);
	    }

	    _createClass(Calcu, [{
	        key: 'layoutNodeByDagre',
	        value: function layoutNodeByDagre(data) {
	            // Create a new directed graph
	            var g = new dagre.graphlib.Graph(),
	                nodes = data.nodes,
	                links = data.links;

	            // Set an object for the graph label
	            g.setGraph({
	                ranksep: 150,
	                rankdir: 'LR'
	            });

	            // Default to assigning a new object as a label for each new edge.
	            g.setDefaultEdgeLabel(function () {
	                return {};
	            });

	            nodes.forEach(function (node) {
	                // 添加点
	                g.setNode(node.id, {
	                    label: node.name,
	                    width: node.size,
	                    height: node.size,
	                    data: node
	                });
	            });

	            links.forEach(function (link) {
	                // 添加线
	                g.setEdge(link.from, link.to, { data: link });
	            });

	            // 布局计算
	            dagre.layout(g);

	            var result = {
	                nodes: [],
	                links: []
	            };
	            g.nodes().forEach(function (v) {
	                result.nodes.push(Object.assign({
	                    id: v
	                }, g.node(v)));
	            });
	            g.edges().forEach(function (e) {
	                result.links.push(Object.assign({
	                    from: e.v,
	                    to: e.w
	                }, g.edge(e)));
	            });

	            return result;
	        }
	    }, {
	        key: 'layoutLine',
	        value: function layoutLine(from, to, adjust) {
	            var x1 = from.x,
	                y1 = from.y,
	                x2 = to.x,
	                y2 = to.y;
	            return [x1 + adjust.x, y1 + adjust.y, (2 * x1 + x2) / 3 + adjust.x, y1 + adjust.y, (x1 + 2 * x2) / 3 + adjust.x, y2 + adjust.y, x2 + adjust.x, y2 + adjust.y];
	        }
	    }]);

	    return Calcu;
	}();

	exports.default = new Calcu();

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global Angel  */

	var Canvas = function () {
	    function Canvas() {
	        _classCallCheck(this, Canvas);
	    }

	    _createClass(Canvas, [{
	        key: 'init',
	        value: function init(container) {
	            var opt = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            var canvas = this.createCanvas(container);
	            this.angel = Angel.init(canvas);
	            this.repaint = opt.repaint;

	            this.bindEvent(canvas);
	            return {
	                angel: this.angel,
	                centerX: this.centerX,
	                centerY: this.centerY
	            };
	        }
	    }, {
	        key: 'getTranslateX',
	        value: function getTranslateX(dom) {
	            return this.getTranslate(dom, 0);
	        }
	    }, {
	        key: 'getTranslateY',
	        value: function getTranslateY(dom) {
	            return this.getTranslate(dom, 1);
	        }
	    }, {
	        key: 'getTranslate',
	        value: function getTranslate(dom, i) {
	            var str = dom.style.transform;
	            return parseInt(str.match(/(\-)?[\.\d]+/g)[i]);
	        }
	    }, {
	        key: 'setTranslate',
	        value: function setTranslate(dom, x, y) {
	            dom.style.transform = 'translate(' + x + 'px, ' + y + 'px)';
	        }
	    }, {
	        key: 'createCanvas',
	        value: function createCanvas(container) {
	            var canvas = this.canvas = document.createElement('div');
	            container.appendChild(canvas);
	            canvas.style.position = "relative";
	            canvas.style.width = 5 * container.offsetWidth + 'px';
	            canvas.style.height = 5 * container.offsetHeight + 'px';
	            this.setTranslate(canvas, -0.4 * canvas.offsetWidth, -0.4 * canvas.offsetHeight);
	            this.width = 5 * container.offsetWidth;
	            this.height = 5 * container.offsetHeight;
	            this.centerX = 2.5 * container.offsetWidth;
	            this.centerY = 2.5 * container.offsetHeight;
	            return canvas;
	        }
	    }, {
	        key: 'initCanvasPosition',
	        value: function initCanvasPosition() {
	            var canvas = this.canvas;
	            this.setTranslate(canvas, -0.4 * canvas.offsetWidth, -0.4 * canvas.offsetHeight);
	        }
	    }, {
	        key: 'bindEvent',
	        value: function bindEvent(canvasDom) {
	            var _this = this;

	            // 绑定画布拖动状态
	            var dom = canvasDom,
	                isDown = false,
	                startX = void 0,
	                startY = void 0,
	                domX = void 0,
	                domY = void 0;
	            dom.addEventListener('mousedown', function (e) {
	                isDown = true;
	                startX = e.pageX;
	                startY = e.pageY;
	                domX = _this.getTranslateX(dom);
	                domY = _this.getTranslateY(dom);
	            });
	            dom.addEventListener('mousemove', function (e) {
	                if (isDown) {
	                    // 画布拖动
	                    _this.setTranslate(dom, domX + e.pageX - startX, domY + e.pageY - startY);
	                }
	            });

	            var dragComplete = function dragComplete() {
	                isDown = false;
	                var w = _this.width,
	                    h = _this.height,
	                    x = _this.getTranslateX(dom),
	                    y = _this.getTranslateY(dom);
	                if (x < -0.6 * w || x > -0.2 * w || y < -0.6 * h || y > -0.2 * y) {
	                    if (_this.repaint) {
	                        _this.centerX += x + _this.width * 0.4;
	                        _this.centerY += y + _this.height * 0.4;
	                        _this.initCanvasPosition();
	                        _this.repaint(_this.centerX, _this.centerY);
	                    }
	                }
	            };
	            dom.addEventListener('mouseup', dragComplete);
	            dom.addEventListener('mouseout', dragComplete);
	        }
	    }]);

	    return Canvas;
	}();

	exports.default = new Canvas();

/***/ }
/******/ ]);