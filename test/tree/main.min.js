/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* global Angel  */
	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Calcu = __webpack_require__(1);

	var _Calcu2 = _interopRequireDefault(_Calcu);

	var _Canvas = __webpack_require__(2);

	var _Canvas2 = _interopRequireDefault(_Canvas);

	var _Store = __webpack_require__(3);

	var _Store2 = _interopRequireDefault(_Store);

	var _CONST = __webpack_require__(4);

	var _CONST2 = _interopRequireDefault(_CONST);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Tree = function () {
	    function Tree() {
	        var _this = this;

	        var opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	        var container = arguments[1];

	        _classCallCheck(this, Tree);

	        this.opt = opt;
	        this.canvasInfo = _Canvas2.default.init(container, {
	            repaint: function repaint(centerX, centerY) {
	                // 画布拖动引发重绘
	                _this.canvasInfo.centerX = centerX;
	                _this.canvasInfo.centerY = centerY;
	                _this.draw();
	            }
	        });
	        this.store = new _Store2.default(Object.assign({}, opt.data));
	        this.draw();
	    }

	    _createClass(Tree, [{
	        key: 'setData',
	        value: function setData(nodes, links) {
	            // 数据重置
	            this.store.setData(Object.assign([], nodes), Object.assign([], links));
	            this.draw();
	        }
	    }, {
	        key: 'addData',
	        value: function addData(nodes, links) {
	            // 数据追加,保留之前数据
	            this.store.updateData(Object.assign([], nodes), Object.assign([], links));
	            this.draw();
	        }
	    }, {
	        key: 'highLight',
	        value: function highLight(filter) {
	            var _this2 = this;

	            var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	            // 高亮节点
	            this.store.clearAllHighLight();
	            var currentIndex = 0;
	            this.store.iteratorNode(function (node) {
	                delete node.hightLight;
	                if (filter(node)) {
	                    // 通过过滤, 高亮
	                    _this2.store.addHighLight(node, currentIndex === index ? 'this' : 'other');
	                    currentIndex++;
	                }
	            });
	            // 重绘
	            this.draw();
	            // 返回高亮节点数
	            return currentIndex;
	        }
	    }, {
	        key: 'clearAllHighLight',
	        value: function clearAllHighLight() {
	            this.store.clearAllHighLight();
	            this.draw();
	        }
	    }, {
	        key: 'draw',
	        value: function draw() {
	            var _this3 = this;

	            var angel = this.canvasInfo.angel,
	                cx = this.canvasInfo.centerX,
	                cy = this.canvasInfo.centerY,
	                data = _Calcu2.default.layoutNodeByDagre(this.store.getExpendData()),
	                nodes = data.nodes,
	                links = data.links;
	            // 清空
	            angel.clear();

	            // 绘制点
	            nodes.forEach(function (node) {
	                var circle = new Angel.Circle({
	                    zlevel: 2,
	                    style: Object.assign({}, {
	                        x: node.x + cx,
	                        y: node.y + cy,
	                        r: node.data.size / 2,
	                        brushType: 'both',
	                        fillStyle: node.data.color,
	                        strokeStyle: node.data.borderColor,
	                        lineWidth: node.data.borderWidth
	                    }),
	                    data: node.data
	                });
	                angel.addShape(circle);
	                // 绑定点击事件
	                _this3.bindEvent(circle);
	            });
	            // 绘制线
	            links.forEach(function (link) {
	                var p = link.points;
	                var line = new Angel.BezierCurve({
	                    zlevel: 1,
	                    style: {
	                        brushType: 'stroke',
	                        lineWidth: link.data.size,
	                        strokeStyle: link.data.color,
	                        points: _Calcu2.default.layoutLine(p[0], p[p.length - 1], {
	                            x: cx,
	                            y: cy
	                        })
	                    }
	                });
	                angel.addShape(line);
	            });
	            angel.render();
	        }
	    }, {
	        key: 'bindEvent',
	        value: function bindEvent(nodeShape) {
	            // click事件
	            this.bindClickEvent(nodeShape);
	            // hover事件
	            this.bindHoverEvent(nodeShape);
	        }
	    }, {
	        key: 'bindClickEvent',
	        value: function bindClickEvent(nodeShape) {
	            var _this4 = this;

	            // 节点点击事件
	            var originData = nodeShape.data;
	            nodeShape.on('click', function () {
	                if (originData.type === 'root') {
	                    // 根节点无点击事件
	                    return;
	                }
	                var nodeData = _this4.store.getNodeById(originData.id);
	                nodeData.isExpend = !nodeData.isExpend;
	                // 展开
	                if (nodeData.isExpend) {
	                    var childNodes = nodeData.type === 'parent' ? nodeData.parents : nodeData.children;
	                    if (!childNodes) {
	                        // 第一次展开操作
	                        if (_this4.opt.onExpand) {
	                            _this4.opt.onExpand.call(_this4, originData, function (nodes, links) {
	                                _this4.addData(nodes, links);
	                            });
	                        }
	                    } else if (childNodes.length > 0) {
	                        // 展开、重绘
	                        _this4.draw();
	                    }
	                }
	                // 收起
	                else {
	                        _this4.draw();
	                    }
	            });
	        }
	    }, {
	        key: 'bindHoverEvent',
	        value: function bindHoverEvent(nodeShape) {
	            var _this5 = this;

	            var originData = nodeShape.data;
	            nodeShape.on('mousemove', function (e) {
	                if (_this5.opt.onNodeMouseEnter) {
	                    _this5.opt.onNodeMouseEnter.call(_this5, originData, {
	                        x: e.clientX,
	                        y: e.clientY
	                    });
	                }
	            });
	        }
	    }]);

	    return Tree;
	}();

	// test


	var mockId = 10;
	var treeDiagram = new Tree({
	    onExpand: function onExpand(nodeData, callback) {
	        var id = nodeData.id,
	            nodes = [],
	            links = [],
	            mockNodeId = void 0;
	        var r = Math.ceil(Math.random() * 4);
	        r = 10;
	        for (var i = 0; i < r; i++) {
	            mockNodeId = mockId++;
	            nodes.push({
	                id: mockNodeId,
	                name: '',
	                type: nodeData.type
	            });
	            var isParent = nodeData.type === 'parent';
	            links.push({
	                from: isParent ? mockNodeId : id,
	                to: isParent ? id : mockNodeId
	            });
	        }
	        callback(nodes, links);
	    },
	    onNodeMouseEnter: function onNodeMouseEnter(nodeData, position) {
	        console.info(position);
	    },
	    onNodeMouseLeave: function onNodeMouseLeave(nodeData, position) {
	        console.info(position);
	    }
	}, document.getElementById("Main"));

	// mock data
	var nodesMap = {},
	    nodes = [{
	    id: 1,
	    //color: 'rgba(0, 200, 0, 1)',
	    //borderColor: 'rgba(0, 240, 0, 1)',
	    name: 'a',
	    //size: 10,
	    type: 'parent'
	}, {
	    id: 2,
	    name: 'a',
	    type: 'root'
	}, {
	    id: 3,
	    name: 'a',
	    type: 'parent'
	}, {
	    id: 4,
	    name: '',
	    type: 'child'
	}, {
	    id: 5,
	    name: '',
	    type: 'child'
	}],
	    links = [{
	    from: 1,
	    to: 2
	}, {
	    from: 3,
	    to: 2
	}, {
	    from: 2,
	    to: 4
	}, {
	    from: 2,
	    to: 5
	}];
	// 重置数据
	treeDiagram.setData(nodes, links);
	// 设置高亮
	setTimeout(function () {
	    treeDiagram.highLight(function (nodeData) {
	        if (nodeData.name === 'a') {
	            return true;
	        }
	        return false;
	    }, 1);
	}, 1000);
	setTimeout(function () {
	    treeDiagram.highLight(function (nodeData) {
	        if (nodeData.name === 'a') {
	            return true;
	        }
	        return false;
	    }, 2);
	}, 2000);
	// 取消高亮
	setTimeout(function () {
	    treeDiagram.clearAllHighLight();
	}, 3000);

	nodes = [{
	    id: 6,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 10,
	    type: 'child'
	}, {
	    id: 7,
	    color: 'rgba(0, 200, 0, 1)',
	    borderColor: 'rgba(0, 240, 0, 1)',
	    name: '',
	    size: 10,
	    type: 'child'
	}];
	links = [{
	    from: 5,
	    to: 6,
	    size: 1,
	    color: 'rgba(200, 0, 0, 1)'
	}, {
	    from: 5,
	    to: 7,
	    size: 1,
	    color: 'rgba(0, 0, 0, 1)'
	}];
	//treeDiagram.addData(nodes, links);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global dagre  */


	var _CONST = __webpack_require__(4);

	var _CONST2 = _interopRequireDefault(_CONST);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Calcu = function () {
	    function Calcu() {
	        _classCallCheck(this, Calcu);
	    }

	    _createClass(Calcu, [{
	        key: 'layoutNodeByDagre',
	        value: function layoutNodeByDagre(data) {
	            // 节点布局计算
	            // Create a new directed graph
	            var g = new dagre.graphlib.Graph(),
	                nodes = data.nodes,
	                links = data.links;

	            // Set an object for the graph label
	            g.setGraph({
	                ranksep: _CONST2.default.ranksep,
	                nodesep: _CONST2.default.nodesep,
	                rankdir: _CONST2.default.rankdir
	            });

	            // Default to assigning a new object as a label for each new edge.
	            g.setDefaultEdgeLabel(function () {
	                return {};
	            });

	            nodes.forEach(function (node) {
	                // 添加点
	                g.setNode(node.id, {
	                    label: node.name,
	                    width: 1, //node.size,
	                    height: 1, //node.size,
	                    data: node
	                });
	            });

	            links.forEach(function (link) {
	                // 添加线
	                g.setEdge(link.from, link.to, { data: link });
	            });

	            // 布局计算
	            dagre.layout(g);

	            var result = {
	                nodes: [],
	                links: []
	            };
	            g.nodes().forEach(function (v) {
	                result.nodes.push(Object.assign({
	                    id: v
	                }, g.node(v)));
	            });
	            g.edges().forEach(function (e) {
	                result.links.push(Object.assign({
	                    from: e.v,
	                    to: e.w
	                }, g.edge(e)));
	            });

	            return result;
	        }
	    }, {
	        key: 'layoutLine',
	        value: function layoutLine(from, to, adjust) {
	            // 贝塞尔曲线
	            var x1 = from.x,
	                y1 = from.y,
	                x2 = to.x,
	                y2 = to.y;
	            return [x1 + adjust.x, y1 + adjust.y, (2 * x1 + x2) / 3 + adjust.x, y1 + adjust.y, (x1 + 2 * x2) / 3 + adjust.x, y2 + adjust.y, x2 + adjust.x, y2 + adjust.y];
	        }
	    }]);

	    return Calcu;
	}();

	exports.default = new Calcu();

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global Angel  */

	var Canvas = function () {
	    function Canvas() {
	        _classCallCheck(this, Canvas);
	    }

	    _createClass(Canvas, [{
	        key: 'init',

	        // 画布类，控制离屏缓存以及重绘
	        value: function init(container) {
	            var opt = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            var canvas = this.createCanvas(container);
	            this.angel = Angel.init(canvas);
	            this.repaint = opt.repaint;

	            this.bindEvent(canvas);
	            return {
	                angel: this.angel,
	                centerX: this.centerX,
	                centerY: this.centerY
	            };
	        }
	    }, {
	        key: 'getTranslateX',
	        value: function getTranslateX(dom) {
	            return this.getTranslate(dom, 0);
	        }
	    }, {
	        key: 'getTranslateY',
	        value: function getTranslateY(dom) {
	            return this.getTranslate(dom, 1);
	        }
	    }, {
	        key: 'getTranslate',
	        value: function getTranslate(dom, i) {
	            var str = dom.style.transform;
	            return parseInt(str.match(/(\-)?[\.\d]+/g)[i]);
	        }
	    }, {
	        key: 'setTranslate',
	        value: function setTranslate(dom, x, y) {
	            dom.style.transform = 'translate(' + x + 'px, ' + y + 'px)';
	        }
	    }, {
	        key: 'createCanvas',
	        value: function createCanvas(container) {
	            var canvas = this.canvas = document.createElement('div');
	            container.appendChild(canvas);
	            canvas.style.position = "relative";
	            canvas.style.width = 5 * container.offsetWidth + 'px';
	            canvas.style.height = 5 * container.offsetHeight + 'px';
	            this.setTranslate(canvas, -0.4 * canvas.offsetWidth, -0.4 * canvas.offsetHeight);
	            this.width = 5 * container.offsetWidth;
	            this.height = 5 * container.offsetHeight;
	            this.centerX = 2.5 * container.offsetWidth;
	            this.centerY = 2.5 * container.offsetHeight;
	            return canvas;
	        }
	    }, {
	        key: 'initCanvasPosition',
	        value: function initCanvasPosition() {
	            var canvas = this.canvas;
	            this.setTranslate(canvas, -0.4 * canvas.offsetWidth, -0.4 * canvas.offsetHeight);
	        }
	    }, {
	        key: 'bindEvent',
	        value: function bindEvent(canvasDom) {
	            var _this = this;

	            // 绑定画布拖动状态
	            var dom = canvasDom,
	                isDown = false,
	                startX = void 0,
	                startY = void 0,
	                domX = void 0,
	                domY = void 0;
	            dom.addEventListener('mousedown', function (e) {
	                isDown = true;
	                startX = e.pageX;
	                startY = e.pageY;
	                domX = _this.getTranslateX(dom);
	                domY = _this.getTranslateY(dom);
	            });
	            dom.addEventListener('mousemove', function (e) {
	                if (isDown) {
	                    // 画布拖动
	                    _this.setTranslate(dom, domX + e.pageX - startX, domY + e.pageY - startY);
	                }
	            });

	            var dragComplete = function dragComplete() {
	                isDown = false;
	                var w = _this.width,
	                    h = _this.height,
	                    x = _this.getTranslateX(dom),
	                    y = _this.getTranslateY(dom);
	                if (x < -0.6 * w || x > -0.2 * w || y < -0.6 * h || y > -0.2 * y) {
	                    if (_this.repaint) {
	                        _this.centerX += x + _this.width * 0.4;
	                        _this.centerY += y + _this.height * 0.4;
	                        _this.initCanvasPosition();
	                        _this.repaint(_this.centerX, _this.centerY);
	                    }
	                }
	            };
	            dom.addEventListener('mouseup', dragComplete);
	            dom.addEventListener('mouseout', dragComplete);
	        }
	    }]);

	    return Canvas;
	}();

	exports.default = new Canvas();

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global  */


	var _CONST = __webpack_require__(4);

	var _CONST2 = _interopRequireDefault(_CONST);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Store = function () {
	    function Store(data) {
	        _classCallCheck(this, Store);

	        this.defaultNodeStyleOpt = {
	            'root': {
	                // 根节点配置
	                color: _CONST2.default.rootNodeColor,
	                borderColor: _CONST2.default.rootNodeBorderColor,
	                size: _CONST2.default.rootSize
	            },
	            'parent': {
	                // 左侧节点配置
	                color: _CONST2.default.parentNodeColor,
	                borderColor: _CONST2.default.parentNodeBorderColor,
	                size: _CONST2.default.nodeSize
	            },
	            'child': {
	                // 右侧节点配置
	                color: _CONST2.default.childNodeColor,
	                borderColor: _CONST2.default.childNodeBorderColor,
	                size: _CONST2.default.nodeSize
	            }
	        };
	        if (data) {
	            this.setData(data.nodes, data.links);
	        }
	    }

	    _createClass(Store, [{
	        key: 'setData',
	        value: function setData(nodes, links) {
	            //数据设置，会清除之前数据
	            this.nodeMap = {};
	            this.linkMap = {};
	            this._dataFormat(nodes, links);
	        }
	    }, {
	        key: 'updateData',
	        value: function updateData(nodes, links) {
	            // 数据更新
	            this._dataFormat(nodes, links);
	        }
	    }, {
	        key: 'getNodeById',
	        value: function getNodeById(id) {
	            this.nodeMap = this.nodeMap || {};
	            return this.nodeMap[id];
	        }
	    }, {
	        key: 'addHighLight',
	        value: function addHighLight(node, type) {
	            // 增加高亮节点
	            node.highLight = type;
	            if (type === 'this') {
	                node.borderColor = _CONST2.default.highLightCurrentColor;
	            } else {
	                node.borderColor = _CONST2.default.highLightColor;
	            }
	        }
	    }, {
	        key: 'clearAllHighLight',
	        value: function clearAllHighLight() {
	            var _this = this;

	            // 清除所有节点高亮效果
	            this.iteratorNode(function (node) {
	                delete node.hightLight;
	                node.borderColor = _this.defaultNodeStyleOpt[node.type].borderColor;
	            });
	        }
	    }, {
	        key: 'iteratorNode',
	        value: function iteratorNode(callback) {
	            var iterator = function iterator(node, direct, isExceptRoot) {
	                if (!isExceptRoot) {
	                    callback(node);
	                }
	                if (node.isExpend && node[direct]) {
	                    // 递归子结点
	                    node[direct].forEach(function (son) {
	                        iterator(son, direct);
	                    });
	                }
	            };
	            iterator(this.root, 'parents');
	            iterator(this.root, 'children', true);
	        }
	    }, {
	        key: 'getExpendData',
	        value: function getExpendData() {
	            // 获取已展开节点的信息(未展开节点不需要显示)
	            var nodes = [],
	                links = [],
	                root = this.root,
	                linkMap = this.linkMap,
	                iterator = function iterator(node, direct, isExceptRoot) {
	                if (!isExceptRoot) {
	                    nodes.push(node);
	                }
	                if (node.isExpend && node[direct]) {
	                    // 递归子结点
	                    node[direct].forEach(function (son) {
	                        links.push(linkMap[node.id + '_' + son.id] || linkMap[son.id + '_' + node.id]);
	                        iterator(son, direct);
	                    });
	                }
	            };
	            if (root) {
	                iterator(root, 'parents');
	                iterator(root, 'children', true);
	            }
	            return {
	                nodes: nodes,
	                links: links
	            };
	        }
	    }, {
	        key: '_dataFormat',
	        value: function _dataFormat(nodes, links) {
	            var _this2 = this;

	            // 数据上下级关系绑定
	            nodes = nodes || [], links = links || [];

	            // 默认配置
	            var defaultNodeOpt = this.defaultNodeStyleOpt,
	                defaultLinkOpt = {
	                'child': {
	                    color: _CONST2.default.childLinkColor,
	                    size: _CONST2.default.linkSize
	                },
	                'parent': {
	                    color: _CONST2.default.parentLinkColor,
	                    size: _CONST2.default.linkSize
	                }
	            };
	            // 保存节点信息
	            this.nodeMap = this.nodeMap || {};
	            nodes.forEach(function (node) {
	                if (!_this2.nodeMap[node.id]) {
	                    // 添加默认属性，如颜色、边框厚度等
	                    _this2.nodeMap[node.id] = Object.assign({
	                        originData: node,
	                        borderWidth: _CONST2.default.borderWidth
	                    }, defaultNodeOpt[node.type], node);
	                    if (node.type === 'root') {
	                        _this2.root = _this2.nodeMap[node.id];
	                    }
	                }
	            });
	            // 解析连线，绑定节点上下级关系
	            this.linkMap = this.linkMap || {};
	            links.forEach(function (link) {
	                var from = _this2.nodeMap[link.from],
	                    to = _this2.nodeMap[link.to],
	                    key = link.from + '_' + link.to;

	                if (!_this2.linkMap[key]) {
	                    from.children = from.children || [];
	                    from.children.push(to);
	                    to.parents = to.parents || [];
	                    to.parents.push(from);
	                    _this2.linkMap[key] = Object.assign({}, to.type === 'parent' || from.type === 'parent' ? defaultLinkOpt.parent : defaultLinkOpt.child, link);
	                    if (from.type === 'parent') {
	                        to.isExpend = true;
	                    } else {
	                        from.isExpend = true;
	                    }
	                }
	            });
	        }
	    }]);

	    return Store;
	}();

	exports.default = Store;

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/* global  */
	exports.default = {
	    ranksep: 220, // 节点层级间的距离
	    nodesep: 40, // 同级节点间距离
	    rankdir: 'LR', // 图布局方向
	    borderWidth: 2, // 节点边框厚度
	    childNodeBorderColor: 'rgba(253, 189, 97, 1)', // 右侧节点边框颜色
	    childNodeColor: 'rgba(254, 220, 171, 1)', // 右侧节点填充色
	    childLinkColor: 'rgba(255, 242, 224, 1)', // 右侧线颜色
	    parentNodeBorderColor: 'rgba(160, 218, 131, 1)', // 左侧节点边框颜色
	    parentNodeColor: 'rgba(187, 229, 165, 1)', // 左侧节点填充色
	    parentLinkColor: 'rgba(236, 248, 230, 1)', // 左侧线颜色
	    rootNodeBorderColor: 'rgba(93, 198, 236, 1)', // 根节点边框颜色
	    rootNodeColor: 'rgba(164, 231, 254, 1)', // 根节点填充色
	    highLightCurrentColor: 'rgba(237, 95, 97, 1)', // 高亮节点颜色(当前聚焦点)
	    highLightColor: 'rgba(255, 150, 50, 1)', // 高亮节点颜色
	    nodeSize: 20, // 普通节点直径
	    linkSize: 4, // 线宽度
	    rootSize: 48 // 根节点直径
	};

/***/ }
/******/ ]);