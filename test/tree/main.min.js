/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* global Angel  */
	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Calcu = __webpack_require__(1);

	var _Calcu2 = _interopRequireDefault(_Calcu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Tree = function () {
	    function Tree(data, container) {
	        _classCallCheck(this, Tree);

	        this.data = data;
	        this.createCanvas(container);
	        this.dragEvent();
	        this.draw();
	        return;
	        var angel = this.angel = Angel.init(container);
	        var line = new Angel.Line({
	            zlevel: 1,
	            style: {
	                brushType: 'stroke',
	                strokeStyle: 'rgba(200, 0, 0, 1)',
	                lineWidth: 1,
	                path: [{ x: 0, y: 0 }, { x: 100, y: 50 }, { x: 200, y: 25 }]
	            }
	        });
	        var circle = new Angel.Circle({
	            zlevel: 1,
	            style: {
	                x: 100,
	                y: 100,
	                r: 30,
	                brushType: 'stroke',
	                lineWidth: 1
	            }
	        });
	        var bezier = new Angel.BezierCurve({
	            zlevel: 1,
	            style: {
	                points: [100, 20, 200, 400, 300, 200, 500, 200],
	                brushType: 'stroke',
	                lineWidth: 1
	            }
	        });
	        angel.addShape(line);
	        angel.addShape(circle);
	        angel.addShape(bezier);
	        angel.render();

	        setInterval(function () {
	            bezier.style.points = [100 + Math.random() * 10, 100 + Math.random() * 10, 300 + Math.random() * 10, 200 + Math.random() * 10, 350 + Math.random() * 10, 0 + Math.random() * 10, 500 + Math.random() * 10, 100 + Math.random() * 10];
	            angel.modShape(bezier);
	            angel.refresh();
	        }, 100);
	    }

	    _createClass(Tree, [{
	        key: 'createCanvas',
	        value: function createCanvas(container) {
	            // 初始化画布size
	            var canvas = this.canvasDiv = document.createElement('div');
	            container.appendChild(canvas);
	            canvas.style.position = "relative";
	            canvas.style.width = 5 * container.offsetWidth + 'px';
	            canvas.style.height = 5 * container.offsetHeight + 'px';
	            canvas.style.left = -0.4 * canvas.offsetWidth + 'px';
	            canvas.style.top = -0.4 * canvas.offsetHeight + 'px';
	            this.centerX = 2.5 * container.offsetWidth;
	            this.centerY = 2.5 * container.offsetHeight;
	            this.angel = Angel.init(canvas);
	        }
	    }, {
	        key: 'dragEvent',
	        value: function dragEvent() {
	            // 绑定画布拖动状态
	            var dom = this.canvasDiv,
	                isDown = false,
	                startX = void 0,
	                startY = void 0,
	                domX = void 0,
	                domY = void 0;
	            this.canvasDiv.addEventListener('mousedown', function (e) {
	                isDown = true;
	                startX = e.pageX;
	                startY = e.pageY;
	                domX = dom.offsetLeft;
	                domY = dom.offsetTop;
	            });
	            this.canvasDiv.addEventListener('mousemove', function (e) {
	                if (isDown) {
	                    // 画布拖动
	                    dom.style.left = domX + e.pageX - startX + 'px';
	                    dom.style.top = domY + e.pageY - startY + 'px';
	                }
	            });
	            this.canvasDiv.addEventListener('mouseup', function () {
	                isDown = false;
	            });
	            this.canvasDiv.addEventListener('mouseout', function () {
	                isDown = false;
	            });
	        }
	    }, {
	        key: 'draw',
	        value: function draw() {
	            var _this = this;

	            var angel = this.angel,
	                cx = this.centerX,
	                cy = this.centerY,
	                r = 6,
	                // 半径
	            wd = 150,
	                // 横向间距
	            hd = 10,
	                // 纵向间距
	            data = this.data;
	            data.x = 0;
	            data.y = 0;
	            var iterateNode = function iterateNode(node) {
	                var circle = new Angel.Circle({
	                    zlevel: 1,
	                    style: {
	                        x: node.x + cx,
	                        y: node.y + cy,
	                        r: r,
	                        brushType: 'stroke',
	                        lineWidth: 1
	                    },
	                    data: node
	                });
	                circle.on('click', function () {
	                    if (node.child) {
	                        delete node.child;
	                        _this.draw();
	                        return;
	                    }
	                    node.child = [];
	                    var n = Math.ceil(Math.random() * 10);
	                    for (var i = 0; i < n; i++) {
	                        node.child.push({
	                            x: node.x + cx + Math.cos((i + 1) * Math.PI * 2 / n) * wd,
	                            y: node.y + cy + Math.sin((i + 1) * Math.PI * 2 / n) * wd
	                        });
	                    }
	                    _this.draw();
	                });
	                angel.addShape(circle);
	                if (node.child) {
	                    for (var i = 0; i < node.child.length; i++) {
	                        iterateNode(node.child[i]);
	                    }
	                }
	            };

	            angel.clear();
	            iterateNode(data);

	            angel.render();
	            return;
	            // let angel = this.angel;
	            // let line = new Angel.Line({
	            //     zlevel: 1,
	            //     style : {
	            //         brushType : 'stroke',
	            //         strokeStyle : 'rgba(200, 0, 0, 1)',
	            //         lineWidth : 1,
	            //         path: [{x: 0, y:0},{x: 100, y:50},{x: 200, y:25}]
	            //     }
	            // });
	            // let circle = new Angel.Circle({
	            //     zlevel: 1,
	            //     style : {
	            //         x: 100,
	            //         y: 100,
	            //         r: 30,
	            //         brushType : 'stroke',
	            //         lineWidth : 1
	            //     }
	            // });
	            // let bezier = new Angel.BezierCurve({
	            //     zlevel: 1,
	            //     style : {
	            //         points: [100, 20, 200, 400, 300, 200, 500, 200],
	            //         brushType : 'stroke',
	            //         lineWidth : 1
	            //     }
	            // });
	            // angel.addShape(line);
	            // angel.addShape(circle);
	            // angel.addShape(bezier);
	            // angel.render();
	            // return;
	            // let r = 20,// 半径
	            //     wd = 50,// 横向间距
	            //     hd = 10, // 纵向间距
	            //     shapeDatas = [{
	            //         x: x,
	            //         y: y
	            //     }];
	            // let node = data;
	            // while(node.parent){
	            //     node = node.parent;
	            //     shapeDatas.push({

	            //     });
	            // }
	        }
	    }]);

	    return Tree;
	}();

	new Tree({
	    name: 'a',
	    child: [{ name: 'b', x: 100, y: 10 }]
	}, document.getElementById("Main"));

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
	    console.info('Calcu');
	};

/***/ }
/******/ ]);